Dense{SparseRunList} representation:

5x5_falses: Bool[0 0 0 0 0; 0 0 0 0 0; 0 0 0 0 0; 0 0 0 0 0; 0 0 0 0 0]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{false, Bool, Int32}(Bool[]), 5, [1, 1, 1, 1, 1, 1], Int32[], Int32[], Element{false, Bool, Int32}(Bool[]); merge =true), 5))
countstored: 0
5x5_trues: Bool[1 1 1 1 1; 1 1 1 1 1; 1 1 1 1 1; 1 1 1 1 1; 1 1 1 1 1]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{false, Bool, Int32}(Bool[1, 1, 1, 1, 1]), 5, [1, 2, 3, 4, 5, 6], [1, 1, 1, 1, 1], [5, 5, 5, 5, 5], Element{false, Bool, Int32}(Bool[]); merge =true), 5))
countstored: 5
4x4_one_bool: Bool[0 0 0 1; 0 0 0 0; 1 0 0 0; 0 1 0 0]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{false, Bool, Int32}(Bool[1, 1, 1]), 4, [1, 2, 3, 3, 4], [3, 4, 1], [3, 4, 1], Element{false, Bool, Int32}(Bool[]); merge =true), 4))
countstored: 3
5x4_bool_mix: Bool[0 1 0 1; 0 0 0 0; 1 1 1 1; 1 1 1 1; 0 1 0 1]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{false, Bool, Int32}(Bool[1, 1, 1, 1, 1, 1]), 5, [1, 2, 4, 5, 7], [3, 1, 3, 3, 1, 3], [4, 1, 5, 4, 1, 5], Element{false, Bool, Int32}(Bool[]); merge =true), 4))
countstored: 6
5x5_zeros: [0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{0.0, Float64, Int32}(Float64[]), 5, [1, 1, 1, 1, 1, 1], Int32[], Int32[], Element{0.0, Float64, Int32}(Float64[]); merge =true), 5))
countstored: 0
5x5_ones: [1.0 1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0 1.0]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{0.0, Float64, Int32}([1.0, 1.0, 1.0, 1.0, 1.0]), 5, [1, 2, 3, 4, 5, 6], [1, 1, 1, 1, 1], [5, 5, 5, 5, 5], Element{0.0, Float64, Int32}(Float64[]); merge =true), 5))
countstored: 5
5x5_float_mix: [0.0 1.0 2.0 2.0 3.0; 0.0 0.0 0.0 0.0 0.0; 1.0 1.0 2.0 0.0 0.0; 0.0 0.0 0.0 3.0 0.0; 0.0 0.0 0.0 0.0 0.0]
tensor: Tensor(Dense{Int32}(SparseRunList{Int32}(Element{0.0, Float64, Int32}([1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0]), 5, [1, 2, 4, 6, 8, 9], [3, 1, 3, 1, 3, 1, 4, 1], [3, 1, 3, 1, 3, 1, 4, 1], Element{0.0, Float64, Int32}(Float64[]); merge =true), 5))
countstored: 8

