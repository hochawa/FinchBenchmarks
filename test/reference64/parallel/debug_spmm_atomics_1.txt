begin
    CR_lvl = ((ex.bodies[1]).bodies[1]).tns.bind.lvl
    CR_lvl_2 = CR_lvl.lvl
    CR_lvl_3 = CR_lvl_2.lvl
    CR_lvl_2_val = CR_lvl_2.lvl.val
    A_lvl = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl
    A_lvl_ptr = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl.ptr
    A_lvl_tbl1 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl.tbl[1]
    A_lvl_tbl2 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl.tbl[2]
    A_lvl_val = A_lvl.lvl.val
    B_lvl = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl
    B_lvl_ptr = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl.ptr
    B_lvl_tbl1 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl.tbl[1]
    B_lvl_tbl2 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl.tbl[2]
    B_lvl_val = B_lvl.lvl.val
    B_lvl.shape[1] == A_lvl.shape[2] || throw(DimensionMismatch("mismatched dimension limits ($(B_lvl.shape[1]) != $(A_lvl.shape[2]))"))
    @warn "Performance Warning: non-concordant traversal of CR[i, j] (hint: most arrays prefer column major or first index fast, run in fast mode to ignore this warning)"
    @warn "Performance Warning: non-concordant traversal of A[i, k] (hint: most arrays prefer column major or first index fast, run in fast mode to ignore this warning)"
    pos_stop = A_lvl.shape[1] * B_lvl.shape[2]
    Finch.resize_if_smaller!(CR_lvl_2_val, pos_stop)
    Finch.fill_range!(CR_lvl_2_val, 0x0000000000000000, 1, pos_stop)
    for i_4 = 1:A_lvl.shape[1]
        B_lvl_q = B_lvl_ptr[1]
        B_lvl_q_stop = B_lvl_ptr[1 + 1]
        if B_lvl_q < B_lvl_q_stop
            B_lvl_i_stop = B_lvl_tbl2[B_lvl_q_stop - 1]
        else
            B_lvl_i_stop = 0
        end
        phase_stop = min(B_lvl.shape[2], B_lvl_i_stop)
        if phase_stop >= 1
            if B_lvl_tbl2[B_lvl_q] < 1
                B_lvl_q = Finch.scansearch(B_lvl_tbl2, 1, B_lvl_q, B_lvl_q_stop - 1)
            end
            while true
                B_lvl_i = B_lvl_tbl2[B_lvl_q]
                B_lvl_q_step = B_lvl_q
                if B_lvl_tbl2[B_lvl_q] == B_lvl_i
                    B_lvl_q_step = Finch.scansearch(B_lvl_tbl2, B_lvl_i + 1, B_lvl_q, B_lvl_q_stop - 1)
                end
                if B_lvl_i < phase_stop
                    CR_lvl_q = (1 - 1) * B_lvl.shape[2] + B_lvl_i
                    CR_lvl_2_q = (CR_lvl_q - 1) * A_lvl.shape[1] + i_4
                    B_lvl_q_2 = B_lvl_q
                    if B_lvl_q < B_lvl_q_step
                        B_lvl_i_stop_2 = B_lvl_tbl1[B_lvl_q_step - 1]
                    else
                        B_lvl_i_stop_2 = 0
                    end
                    A_lvl_q = A_lvl_ptr[1]
                    A_lvl_q_stop = A_lvl_ptr[1 + 1]
                    if A_lvl_q < A_lvl_q_stop
                        A_lvl_i_stop = A_lvl_tbl2[A_lvl_q_stop - 1]
                    else
                        A_lvl_i_stop = 0
                    end
                    phase_stop_3 = min(B_lvl.shape[1], B_lvl_i_stop_2, A_lvl_i_stop)
                    if phase_stop_3 >= 1
                        k = 1
                        if B_lvl_tbl1[B_lvl_q] < 1
                            B_lvl_q_2 = Finch.scansearch(B_lvl_tbl1, 1, B_lvl_q, B_lvl_q_step - 1)
                        end
                        if A_lvl_tbl2[A_lvl_q] < 1
                            A_lvl_q = Finch.scansearch(A_lvl_tbl2, 1, A_lvl_q, A_lvl_q_stop - 1)
                        end
                        while k <= phase_stop_3
                            B_lvl_i_2 = B_lvl_tbl1[B_lvl_q_2]
                            A_lvl_i = A_lvl_tbl2[A_lvl_q]
                            A_lvl_q_step = A_lvl_q
                            if A_lvl_tbl2[A_lvl_q] == A_lvl_i
                                A_lvl_q_step = Finch.scansearch(A_lvl_tbl2, A_lvl_i + 1, A_lvl_q, A_lvl_q_stop - 1)
                            end
                            phase_stop_4 = min(A_lvl_i, phase_stop_3, B_lvl_i_2)
                            if B_lvl_i_2 == phase_stop_4 && A_lvl_i == phase_stop_4
                                B_lvl_2_val = B_lvl_val[B_lvl_q_2]
                                A_lvl_q_2 = A_lvl_q
                                if A_lvl_q < A_lvl_q_step
                                    A_lvl_i_stop_2 = A_lvl_tbl1[A_lvl_q_step - 1]
                                else
                                    A_lvl_i_stop_2 = 0
                                end
                                phase_stop_5 = min(i_4, A_lvl_i_stop_2)
                                if phase_stop_5 >= i_4
                                    if A_lvl_tbl1[A_lvl_q] < i_4
                                        A_lvl_q_2 = Finch.scansearch(A_lvl_tbl1, i_4, A_lvl_q, A_lvl_q_step - 1)
                                    end
                                    while true
                                        A_lvl_i_2 = A_lvl_tbl1[A_lvl_q_2]
                                        if A_lvl_i_2 < phase_stop_5
                                            A_lvl_2_val = A_lvl_val[A_lvl_q_2]
                                            CR_lvl_2_val[CR_lvl_2_q] = B_lvl_2_val * A_lvl_2_val + CR_lvl_2_val[CR_lvl_2_q]
                                            A_lvl_q_2 += 1
                                        else
                                            phase_stop_7 = min(phase_stop_5, A_lvl_i_2)
                                            if A_lvl_i_2 == phase_stop_7
                                                A_lvl_2_val = A_lvl_val[A_lvl_q_2]
                                                CR_lvl_2_val[CR_lvl_2_q] += B_lvl_2_val * A_lvl_2_val
                                                A_lvl_q_2 += 1
                                            end
                                            break
                                        end
                                    end
                                end
                                B_lvl_q_2 += 1
                                A_lvl_q = A_lvl_q_step
                            elseif A_lvl_i == phase_stop_4
                                A_lvl_q = A_lvl_q_step
                            elseif B_lvl_i_2 == phase_stop_4
                                B_lvl_q_2 += 1
                            end
                            k = phase_stop_4 + 1
                        end
                    end
                    B_lvl_q = B_lvl_q_step
                else
                    phase_stop_12 = min(phase_stop, B_lvl_i)
                    if B_lvl_i == phase_stop_12
                        CR_lvl_q = (1 - 1) * B_lvl.shape[2] + phase_stop_12
                        CR_lvl_2_q_2 = (CR_lvl_q - 1) * A_lvl.shape[1] + i_4
                        B_lvl_q_3 = B_lvl_q
                        if B_lvl_q < B_lvl_q_step
                            B_lvl_i_stop_3 = B_lvl_tbl1[B_lvl_q_step - 1]
                        else
                            B_lvl_i_stop_3 = 0
                        end
                        A_lvl_q_3 = A_lvl_ptr[1]
                        A_lvl_q_stop_3 = A_lvl_ptr[1 + 1]
                        if A_lvl_q_3 < A_lvl_q_stop_3
                            A_lvl_i_stop_3 = A_lvl_tbl2[A_lvl_q_stop_3 - 1]
                        else
                            A_lvl_i_stop_3 = 0
                        end
                        phase_stop_13 = min(B_lvl.shape[1], B_lvl_i_stop_3, A_lvl_i_stop_3)
                        if phase_stop_13 >= 1
                            k = 1
                            if B_lvl_tbl1[B_lvl_q] < 1
                                B_lvl_q_3 = Finch.scansearch(B_lvl_tbl1, 1, B_lvl_q, B_lvl_q_step - 1)
                            end
                            if A_lvl_tbl2[A_lvl_q_3] < 1
                                A_lvl_q_3 = Finch.scansearch(A_lvl_tbl2, 1, A_lvl_q_3, A_lvl_q_stop_3 - 1)
                            end
                            while k <= phase_stop_13
                                B_lvl_i_3 = B_lvl_tbl1[B_lvl_q_3]
                                A_lvl_i_3 = A_lvl_tbl2[A_lvl_q_3]
                                A_lvl_q_step_3 = A_lvl_q_3
                                if A_lvl_tbl2[A_lvl_q_3] == A_lvl_i_3
                                    A_lvl_q_step_3 = Finch.scansearch(A_lvl_tbl2, A_lvl_i_3 + 1, A_lvl_q_3, A_lvl_q_stop_3 - 1)
                                end
                                phase_stop_14 = min(A_lvl_i_3, phase_stop_13, B_lvl_i_3)
                                if B_lvl_i_3 == phase_stop_14 && A_lvl_i_3 == phase_stop_14
                                    B_lvl_2_val_3 = B_lvl_val[B_lvl_q_3]
                                    A_lvl_q_4 = A_lvl_q_3
                                    if A_lvl_q_3 < A_lvl_q_step_3
                                        A_lvl_i_stop_4 = A_lvl_tbl1[A_lvl_q_step_3 - 1]
                                    else
                                        A_lvl_i_stop_4 = 0
                                    end
                                    phase_stop_15 = min(i_4, A_lvl_i_stop_4)
                                    if phase_stop_15 >= i_4
                                        if A_lvl_tbl1[A_lvl_q_3] < i_4
                                            A_lvl_q_4 = Finch.scansearch(A_lvl_tbl1, i_4, A_lvl_q_3, A_lvl_q_step_3 - 1)
                                        end
                                        while true
                                            A_lvl_i_4 = A_lvl_tbl1[A_lvl_q_4]
                                            if A_lvl_i_4 < phase_stop_15
                                                A_lvl_2_val_2 = A_lvl_val[A_lvl_q_4]
                                                CR_lvl_2_val[CR_lvl_2_q_2] = B_lvl_2_val_3 * A_lvl_2_val_2 + CR_lvl_2_val[CR_lvl_2_q_2]
                                                A_lvl_q_4 += 1
                                            else
                                                phase_stop_17 = min(phase_stop_15, A_lvl_i_4)
                                                if A_lvl_i_4 == phase_stop_17
                                                    A_lvl_2_val_2 = A_lvl_val[A_lvl_q_4]
                                                    CR_lvl_2_val[CR_lvl_2_q_2] += B_lvl_2_val_3 * A_lvl_2_val_2
                                                    A_lvl_q_4 += 1
                                                end
                                                break
                                            end
                                        end
                                    end
                                    B_lvl_q_3 += 1
                                    A_lvl_q_3 = A_lvl_q_step_3
                                elseif A_lvl_i_3 == phase_stop_14
                                    A_lvl_q_3 = A_lvl_q_step_3
                                elseif B_lvl_i_3 == phase_stop_14
                                    B_lvl_q_3 += 1
                                end
                                k = phase_stop_14 + 1
                            end
                        end
                        B_lvl_q = B_lvl_q_step
                    end
                    break
                end
            end
        end
    end
    resize!(CR_lvl_2_val, A_lvl.shape[1] * B_lvl.shape[2])
    (CR = Tensor((DenseLevel){Int64}((DenseLevel){Int64}(CR_lvl_3, A_lvl.shape[1]), B_lvl.shape[2])),)
end
